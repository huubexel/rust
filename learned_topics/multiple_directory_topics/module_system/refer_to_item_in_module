All of the code referred to in this file is in vegetables.rs

There are two path sorts at which you can refer:
- Absolute path: full-length path starting from the crate root. If the crate is external, start with the name of
  the crate when you refer to it. If it is from this crate, than use 'crate' at the start of the path.
- relative path: starts from the current module and uses self, super or an identifier in the current module.

For both the absolute and relative path you use the :: between the last path identifier and the following one that
you are referring with.

Here are some examples when you are in vegetables.rs (see vegetables.rs in /src/garden/vegetables.rs):
crate::garden::vegetables::paprika::seeds::grow();      for the absolute path
paprika::seeds::grow();                     for the relative path

As you can see, you have to name each successive module until you reach the function from the module you want to use.
If you replace the :: with / you basically have the path with the modules. Where calling crate is calling root /

The preference is with absolute paths. Please use absolute paths.

Alright, let's say you now have this code:
#[derive(Debug)]
pub struct Carrot {}

mod paprika {
    mod seeds {
        fn grow() {}
    }
}

pub fn regenerate_food() {
    /* Absolute path */
    crate::garden::vegetables::paprika::seeds::grow();
    /* The absolute might say that the first part is unnecessary,
       it is way cleaner, you will know exactly where it is. */

    /* Relative path */
    paprika::seeds::grow();
}

This will spawn an error that the seeds modules is private and you cannot use it unless it becomes public.
In Rust all items (functions, methods, structs, enums, modules, and constants),
are private to parent modules by default. So that means that seeds is private to use only for paprika right now.
If we make seeds public we are already a step further into making this work.
pub mod seeds {}

But running the code with the adjustment, still gives an error.
Right now, seeds is public to use. But grow is still private for seeds only and we want to use it outside of
seeds, in regenerate_food.
The only thing the pub keyword on a module does (like pub mod seeds) is, it lets code in its ancestors modules refer
to it, this sounds cryptic, but let me explain.
Modules are basically containers, if you make the contents of the container public, but all those contents are
private, than there still is no way to get anything out of that module, because the private functions or other
private contents can only be use by other functions in that module.
So if you want to a function from the module, you have to make that function public, so now you get this code.
mod paprika {
    pub mod seeds {
        pub fn grow() {}
    }
}

pub fn regenerate_food() {
    /* Absolute path */
    crate::garden::vegetables::paprika::seeds::grow();
    /* The absolute might say that the first part is unnecessary,
       it is way cleaner, you will know exactly where it is. */

    /* Relative path */
    paprika::seeds::grow();
}

This code will run!
See vegetables.rs for the code.

Referring to an item with super::
If something is in the parent module / parent code of the current code you are writing, you cannot make a relative
because for a relative path you have to start on the same level and go deeper.
And say you are 15 levels deep, that means that you have to type 15 things deep which makes no sense if it is just
above your current code.
For this, Rust uses super::
With super:: you can get to the parent of your current module or code.
So say you are in a file and this is the code:

fn deliver_order() {}

mod back_of_house {
    fn fix_incorrect_order() {
        cook_order();
    }

    fn cook_order() {}
}

Say you want to use deliver_order and this code is 15 levels deep, normally you would need to use an absolute path
because that is the only way you could get there without moving the code.
But in this situation it is fairly useful to use super!
To get deliver_order put super::deliver_order(); in fix_incorrect_order --> see actions.rs




















